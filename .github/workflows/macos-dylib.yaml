name: macos-dylib

on:
  push:
    tags: [ macos-dylib ]
    paths: [ scripts/macos/* ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - tag: Silicon
          arch: arm64
          target: "11.0"
          meson: --cross-file $GITHUB_WORKSPACE/scripts/macos/macos_arm64.txt
        - tag: Intel
          arch: x86_64
          target: "10.15"
          meson: --cross-file $GITHUB_WORKSPACE/scripts/macos/macos_x86_64.txt
        tag: [ Silicon, Intel ]
    runs-on: macos-12
    env:
      CMAKE_OSX_ARCHITECTURES: ${{ matrix.arch }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target }}
      CMAKE_BUILD_TYPE: Release
      CMAKE_PREFIX_PATH: /tmp
      PKG_CONFIG_LIBDIR: /tmp/lib/pkgconfig
    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: scripts/macos
    - name: Remove stray upstream python binary symlinks under /usr/local
      run: |
        find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete -print
        brew unlink python && brew link --overwrite python
    - name: Install dependency
      run: brew install python
    - name: Build glfw
      run: |
        curl -sSL https://github.com/dragonflylee/glfw/archive/switchfin.tar.gz | tar zxf - -C ${{ runner.temp }}
        cmake -B build-glfw -G Ninja ${{ runner.temp }}/glfw-switchfin \
          -DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \
          -DCMAKE_INSTALL_NAME_DIR=$CMAKE_PREFIX_PATH/lib \
          -DBUILD_SHARED_LIBS=ON \
          -DGLFW_BUILD_EXAMPLES=OFF \
          -DGLFW_BUILD_TESTS=OFF \
          -DGLFW_BUILD_DOCS=OFF
        cmake --build build-glfw
        cmake --install build-glfw
    - name: Build freetype
      run: |
        curl -sSL https://downloads.sourceforge.net/project/freetype/freetype2/2.13.3/freetype-2.13.3.tar.xz | tar Jxf - -C ${{ runner.temp }}
        meson setup build-freetype ${{ runner.temp }}/freetype-2.13.3 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Dharfbuzz=disabled -Dbrotli=disabled -Dzlib=system
        meson compile -C build-freetype
        meson install -C build-freetype
    - name: Build harfbuzz
      run: |
        curl -sSL https://github.com/harfbuzz/harfbuzz/releases/download/10.1.0/harfbuzz-10.1.0.tar.xz | tar Jxf - -C ${{ runner.temp }}
        meson setup build-harfbuzz ${{ runner.temp }}/harfbuzz-10.1.0 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Dtests=disabled -Ddocs=disabled -Dicu=disabled -Dcairo=disabled \
          -Dglib=disabled -Dgobject=disabled -Dbenchmark=disabled
        meson compile -C build-harfbuzz
        meson install -C build-harfbuzz
    - name: Build fribidi
      run: |
        curl -sSL https://github.com/fribidi/fribidi/releases/download/v1.0.16/fribidi-1.0.16.tar.xz | tar Jxf - -C ${{ runner.temp }}
        meson setup build-fribidi ${{ runner.temp }}/fribidi-1.0.16 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Ddocs=false -Dbin=false -Dtests=false
        meson compile -C build-fribidi
        meson install -C build-fribidi
    - name: Build libass
      run: |
        curl -sSL https://github.com/libass/libass/releases/download/0.17.3/libass-0.17.3.tar.xz | tar Jxf - -C ${{ runner.temp }}
        meson setup build-libass ${{ runner.temp }}/libass-0.17.3 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared -Dasm=disabled
        meson compile -C build-libass
        meson install -C build-libass
    - name: Build dav1d
      run: |
        curl -sSL https://downloads.videolan.org/pub/videolan/dav1d/1.5.0/dav1d-1.5.0.tar.xz | tar Jxf - -C ${{ runner.temp }}
        meson setup build-dav1d ${{ runner.temp }}/dav1d-1.5.0 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Denable_tools=false -Denable_examples=false -Denable_tests=false -Denable_docs=false
        meson compile -C build-dav1d
        meson install -C build-dav1d
    - name: Build libwebp
      run: |
        curl -sSL https://github.com/webmproject/libwebp/archive/v1.4.0.tar.gz | tar zxf - -C ${{ runner.temp }}
        cmake -B build-libwebp -G Ninja ${{ runner.temp }}/libwebp-1.4.0 \
          -DCMAKE_INSTALL_PREFIX=$CMAKE_PREFIX_PATH \
          -DCMAKE_INSTALL_NAME_DIR=$CMAKE_PREFIX_PATH/lib \
          -DBUILD_SHARED_LIBS=ON \
          -DWEBP_BUILD_EXTRAS=OFF \
          -DWEBP_BUILD_ANIM_UTILS=OFF \
          -DWEBP_BUILD_CWEBP=OFF \
          -DWEBP_BUILD_DWEBP=OFF \
          -DWEBP_BUILD_GIF2WEBP=OFF \
          -DWEBP_BUILD_IMG2WEBP=OFF \
          -DWEBP_BUILD_VWEBP=OFF \
          -DWEBP_BUILD_WEBPINFO=OFF \
          -DWEBP_BUILD_WEBPMUX=OFF \
          -DWEBP_BUILD_LIBWEBPMUX=OFF
        cmake --build build-libwebp
        cmake --install build-libwebp
    - name: Build ffmpeg
      run: |
        curl -sSL https://ffmpeg.org/releases/ffmpeg-7.1.tar.xz | tar Jxf - -C ${{ runner.temp }}
        mkdir -p build-ffmpeg && cd build-ffmpeg
        ${{ runner.temp }}/ffmpeg-7.1/configure --enable-shared --disable-static \
          --prefix=$CMAKE_PREFIX_PATH --enable-pthreads --disable-runtime-cpudetect \
          --cc=clang --enable-cross-compile --target-os=darwin --arch=${{ matrix.arch }} \
          --extra-cflags='-arch ${{ matrix.arch }} -mmacosx-version-min=${{ matrix.target }}' \
          --extra-cxxflags='-arch ${{ matrix.arch }} -mmacosx-version-min=${{ matrix.target }}' \
          --extra-ldflags='-arch ${{ matrix.arch }} -mmacosx-version-min=${{ matrix.target }}' \
          --disable-autodetect --disable-encoders --enable-pic --disable-asm \
          --disable-programs --disable-doc --disable-debug --disable-avdevice \
          --disable-filters --enable-filter=hflip,vflip,transpose --disable-muxers \
          --disable-protocols --enable-protocol=file,http,tcp,udp,hls,https,tls,httpproxy \
          --disable-libjack --disable-indev=jack --disable-postproc --enable-demuxer=hls \
          --enable-libdav1d --enable-libass --enable-libfreetype --enable-zlib --enable-bzlib \
          --enable-network --enable-securetransport --enable-videotoolbox --enable-audiotoolbox
        make -j$(sysctl -n hw.ncpu)
        make install
    - name: Build libplacebo
      run: |
        git clone https://code.videolan.org/videolan/libplacebo.git -b v7.349.0 --depth 1 --recurse-submodules ${{ runner.temp }}/libplacebo
        meson setup build-libplacebo ${{ runner.temp }}/libplacebo ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Ddemos=false -Dtests=false -Dopengl=enabled -Dlcms=disabled -Dvulkan=disabled
        meson compile -C build-libplacebo
        meson install -C build-libplacebo
    - name: Build mpv
      run: |
        curl -sSL https://github.com/mpv-player/mpv/archive/v0.39.0.tar.gz | tar zxf - -C ${{ runner.temp }}
        meson setup build-mpv ${{ runner.temp }}/mpv-0.39.0 ${{ matrix.meson }} \
          --prefix=$CMAKE_PREFIX_PATH --buildtype=release --default-library=shared \
          -Dlibmpv=true -Dcplayer=false -Dtests=false -Dswift-build=disabled -Dcocoa=disabled \
          -Dmacos-cocoa-cb=disabled -Dmacos-media-player=disabled -Dmacos-touchbar=disabled \
          -Dlibarchive=disabled -Dlcms2=disabled -Djpeg=disabled \
          -Dmanpage-build=disabled -Dhtml-build=disabled 
        meson compile -C build-mpv
        meson install -C build-mpv
    - name: Build packages
      run: |
        cd $CMAKE_PREFIX_PATH
        tar zcf ${{ github.workspace }}/dylib-ffmpeg71-mpv39-${{ matrix.tag }}.tar.gz \
          include lib/pkgconfig lib/cmake lib/*.dylib
    - name: Archive Build Logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.tag }}
        path: |
          build-ffmpeg/ffbuild/*.log
          build-*/meson-logs/*.txt
    - name: Upload packages
      uses: softprops/action-gh-release@v2
      with:
        name: macos-dylib
        tag_name: macos-dylib
        prerelease: true
        files: dylib-*.tar.gz
        body: |
          ![download](https://img.shields.io/github/downloads/${{ github.repository }}/macos-dylib/total?label=Downloads)

